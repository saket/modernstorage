{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#modernstorage","title":"ModernStorage","text":"<p>ModernStorage is a group of libraries that provide an abstraction layer over storage on Android to simplify its interactions by apps developers. ModernStorage is:</p> <ul> <li>Easy to use: ModernStorage focuses on API simplicity. Rather than calling four separate methods with the Android Framework API, you only need to call one.</li> <li>Opinionated: ModernStorage is written by the Android DevRel team in collaboration with the Android Storage team, taking in account all the feedback from the developer community to address common issues when dealing with storage on Android.</li> </ul>"},{"location":"#download","title":"Download","text":"<p>ModernStorage is available on <code>mavenCentral()</code>.</p> <pre><code>// For storage permissions checking\nimplementation(\"me.saket.modernstorage:modernstorage-permissions:1.0.0-alpha07\")\n\n// For storage interactions using Okio FileSystem API\nimplementation(\"me.saket.modernstorage:modernstorage-storage:1.0.0-alpha07\")\n</code></pre> <p>Alternatively use the Bill of Material to just have to define the version once, and then define which modules you need.</p> <pre><code>implementation(\"me.saket.modernstorage:modernstorage-bom:1.0.0-alpha07\")\n\nimplementation(\"me.saket.modernstorage:modernstorage-permissions\")\n\nimplementation(\"me.saket.modernstorage:modernstorage-storage\")\n\n// The Bill of Material includes Okio as well\nimplementation(\"com.squareup.okio:okio\")\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<ul> <li>Have a look at the permissions and storage interactions guides</li> <li>Check out the sample app</li> </ul>"},{"location":"#is-it-ready","title":"Is it ready?","text":"<p>It's in progress! Our current version is 1.0.0-alpha07. As it's an alpha release, we're expecting API breaking changes between releases.</p> <p>We're looking for a stable release in 2022 (we don't have yet a precise date). We actively listen to your feedback to make ModernStorage the default library for storage interactions on Android.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>We're still at an early stage sharing the vision of ModernStorage and would love to have more feature requests and ideas proposed as issues. We would be glad to review pull requests, but keep in mind that we want to minimize expanding the API surface until we get more feedback from developers. Make sure to read the Contributing page first though.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2021 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"permissions/","title":"Permissions","text":"<p><code>modernstorage-permissions</code> is a library simplifying checking storage permissions. It works on Android 21+.</p>"},{"location":"permissions/#add-dependency-to-project","title":"Add dependency to project","text":"<p><code>modernstorage-permissions</code> is available on <code>mavenCentral()</code>.</p> <pre><code>// build.gradle\nimplementation(\"com.google.modernstorage:modernstorage-permissions:1.0.0-alpha07\")\n</code></pre>"},{"location":"permissions/#api-reference","title":"API reference","text":"<p><code>modernstorage-permissions</code> API reference is available here.</p>"},{"location":"permissions/#storage-permissions-usage","title":"Storage Permissions usage","text":"<p>Android provides two types of storage to save files:</p> <ul> <li>App-specific (internal folder, external app folder)</li> <li>Shared (visible using the system file manager)</li> </ul> <p>With the introduction of Scoped Storage in Android 10 (API 29), the storage access has deeply changed:</p> <ul> <li>You can add media &amp; document files without any permission, reading and editing media files created by other apps require <code>READ_EXTERNAL_STORAGE</code></li> <li>Document files created by other apps are readable only using the Storage Access Framework</li> </ul> <p>To help you navigate common use cases, check out the below table:</p> Actions API 29- API 29+ Read media files (created by self) <code>READ_EXTERNAL_STORAGE</code> No permission needed Read media files (created by all apps) <code>READ_EXTERNAL_STORAGE</code> <code>READ_EXTERNAL_STORAGE</code> Add file (media, document) <code>WRITE_EXTERNAL_STORAGE</code> No permission needed Edit &amp; Delete media files (created by self) <code>WRITE_EXTERNAL_STORAGE</code> No permission needed Edit &amp; Delete media files (created by all apps) <code>WRITE_EXTERNAL_STORAGE</code> <code>READ_EXTERNAL_STORAGE</code> 1\ufe0f\u20e3 Edit &amp; Delete document files (created by self) <code>WRITE_EXTERNAL_STORAGE</code> No permission needed Edit &amp; Delete document files (created by all apps) <code>WRITE_EXTERNAL_STORAGE</code> Storage Access Framework <p>1\ufe0f\u20e3 When editing or deleting media files created by other apps on API 29+ (Android 10), you have to request explicitly user's consent. Read more here.</p>"},{"location":"permissions/#check-if-app-can-access-files","title":"Check if app can access files","text":"<pre><code>// Check if the app can read image &amp; document files created by itself\nval storagePermissions = StoragePermissions(context)\n\nstoragePermissions.hasAccess(\naction = Action.READ,\ntypes = listOf(FileType.Image, FileType.Document),\ncreatedBy = StoragePermissions.CreatedBy.Self\n)\n\n// Check if the app can read video &amp; audio files created by all apps\nstoragePermissions.hasAccess(\naction = Action.READ,\ntypes = listOf(FileType.Video, FileType.Audio),\ncreatedBy = StoragePermissions.CreatedBy.AllApps\n)\n\n// Check if the app can read &amp; write image &amp; document files created by itself\nval storagePermissions = StoragePermissions(context)\n\nstoragePermissions.hasAccess(\naction = Action.READ_AND_WRITE,\ntypes = listOf(FileType.Image, FileType.Video),\ncreatedBy = StoragePermissions.CreatedBy.Self\n)\n\n// Check if the app can read &amp; write video &amp; audio files created by all apps\nstoragePermissions.hasAccess(\naction = Action.READ_AND_WRITE,\ntypes = listOf(FileType.Audio, FileType.Document),\ncreatedBy = StoragePermissions.CreatedBy.AllApps\n)\n</code></pre>"},{"location":"permissions/#get-storage-permissions","title":"Get storage permissions","text":"<p>If the method returns an empty list, it means your app on the current device, given the defined usage,  doesn't need any permissions.</p> <pre><code>// Get required permissions to read &amp; write video &amp; audio files created by all apps\nStoragePermissions.getPermissions(\naction = Action.READ,\ntypes = listOf(FileType.Video, FileType.Audio),\ncreatedBy = StoragePermissions.CreatedBy.AllApps\n)\n\n// Get required permissions to read &amp; write image &amp; document files created by the app itself\nStoragePermissions.getPermissions(\naction = Action.READ_AND_WRITE,\ntypes = listOf(FileType.Image, FileType.Document),\ncreatedBy = StoragePermissions.CreatedBy.Self\n)\n</code></pre>"},{"location":"permissions/#request-storage-permissions","title":"Request storage permissions","text":"<p>While you can use the <code>ActivityResultContracts.RequestPermission</code> provided by default with the Jetpack Activity or Fragment library to request storage permissions with input from <code>StoragePermissions.getPermissions</code>, <code>modernstorage-permissions</code> bundles a custom ActivityResultContract named <code>RequestAccess</code> to request the right storage permissions to simplify the logic for you.</p> Compose <pre><code>@Composable\nfun RequestAccessExample() {\n// Register a callback for the Activity Result\nval requestAccess = rememberLauncherForActivityResult(RequestAccess()) { hasAccess -&gt;\nif (hasAccess) {\n// write logic here\n}\n}\n\nColumn {\nButton(onClick = {\n// Request permission to read video &amp; audio files created by all apps\nrequestAccess.launch(\nRequestAccess.Args(\naction = Action.READ,\ntypes = listOf(\nStoragePermissions.FileType.Video,\nStoragePermissions.FileType.Audio\n),\ncreatedBy = StoragePermissions.CreatedBy.AllApps\n),\n)\n}) {\nText(\"I want to read all video &amp; audio files\")\n}\n\nButton(onClick = {\n// Request permission to read &amp; write image &amp; document files created by the app itself\nrequestAccess.launch(\nRequestAccess.Args(\naction = Action.READ_AND_WRITE,\ntypes = listOf(\nStoragePermissions.FileType.Image,\nStoragePermissions.FileType.Document\n),\ncreatedBy = StoragePermissions.CreatedBy.Self\n)\n)\n}) {\nText(\"I want to read &amp; write the app's image &amp; document files\")\n}\n}\n}\n</code></pre> Views <pre><code>// Register a callback for the Activity Result\nval requestAccess = registerForActivityResult(RequestAccess()) { hasAccess -&gt;\nif (hasAccess) {\n// write logic here\n}\n}\n\n\n// Request permission to read video &amp; audio files created by all apps\nrequestAccess.launch(\nRequestAccess.Args(\naction = Action.READ,\ntypes = listOf(StoragePermissions.FileType.Video, StoragePermissions.FileType.Audio),\ncreatedBy = StoragePermissions.CreatedBy.AllApps\n)\n)\n\n// Request permission to read &amp; write image &amp; document files created by the app itself\nrequestAccess.launch(\nRequestAccess.Args(\naction = Action.READ_AND_WRITE,\ntypes = listOf(StoragePermissions.FileType.Image, StoragePermissions.FileType.Document),\ncreatedBy = StoragePermissions.CreatedBy.Self\n)\n)\n</code></pre>"},{"location":"storage/","title":"Storage Interactions","text":"<p><code>modernstorage-storage</code> is a library abstracting storage interactions on Android using the library Okio. It relies on its FileSystem API, which provides a set of methods to read and write files.</p> <p>Instead of opening an <code>InputStream</code> or <code>OutputStream</code> and relies on different APIs to get file metadata for MediaStore and Storage Access Framework <code>DocumentProvider</code>, this library takes Uri (changed to Path to make it work with Okio) as an input for all its methods to read and write files but also get metadata.</p>"},{"location":"storage/#add-dependency-to-project","title":"Add dependency to project","text":"<p><code>modernstorage-storage</code> is available on <code>mavenCentral()</code>.</p> <pre><code>// build.gradle\n\n// modernstorage-storage requires Okio 3.x.x as a dependency\nimplementation(\"com.squareup.okio:okio:3.0.0\")\nimplementation(\"com.google.modernstorage:modernstorage-storage:1.0.0-alpha07\")\n</code></pre>"},{"location":"storage/#api-reference","title":"API reference","text":"<p><code>modernstorage-storage</code> API reference is available here.</p>"},{"location":"storage/#initialize-before-usage","title":"Initialize before usage","text":"<p>To interact with the FileSystem API, you need to initialize an instance first:</p> <pre><code>import com.google.modernstorage.storage.AndroidFileSystem\n\nval fileSystem = AndroidFileSystem(context)\n</code></pre>"},{"location":"storage/#get-path-from-uri","title":"Get Path from Uri","text":"<p>Call <code>toOkioPath</code> to get a <code>Path</code> from a <code>Uri</code>:</p> <pre><code>val path = uri.toOkioPath()\n</code></pre>"},{"location":"storage/#get-path-from-file","title":"Get Path from File","text":"<p>Call <code>toOkioPath</code> to get a <code>Path</code> from a <code>File</code>:</p> <pre><code>val path = File(context.filesDir, \"myfile.jpg\").toOkioPath()\n</code></pre>"},{"location":"storage/#copy-a-file","title":"Copy a file","text":"<p>You can easily copy a file to another location by using the <code>copy</code> method: <pre><code>fileSystem.copy(originPath, targetPath)\n</code></pre></p>"},{"location":"storage/#get-file-metadata","title":"Get file metadata","text":"<p>You can get the file size by using the method <code>metadataOrNull</code>:</p> <pre><code>import com.google.modernstorage.storage.MetadataExtras.DisplayName\nimport com.google.modernstorage.storage.MetadataExtras.MimeType\n\nval fileMetadata = fileSystem.metadataOrNull(uri.toOkioPath())\nLog.d(\"ModernStorage/uri\", uri.toString())\nLog.d(\"ModernStorage/isRegularFile\", metadata.isRegularFile.toString())\nLog.d(\"ModernStorage/isDirectory\", metadata.isDirectory.toString())\nLog.d(\"ModernStorage/size\", metadata.size.toString())\nLog.d(\"ModernStorage/lastModifiedAtMillis\", metadata.lastModifiedAtMillis.toString())\nLog.d(\"ModernStorage/displayName\", metadata.extra(DisplayName::class).value)\nLog.d(\"ModernStorage/mimeType\", metadata.extra(MimeType::class).value)\n</code></pre>"},{"location":"storage/#read-a-text-file-uri-from-the-storage-access-framework","title":"Read a Text file Uri from the Storage Access Framework","text":"<pre><code>/**\n * We register first an ActivityResult handler for Intent.ACTION_OPEN_DOCUMENT\n * Read more about ActivityResult here: https://developer.android.com/training/basics/intents/result\n */\nval actionOpenTextFile = registerForActivityResult(OpenDocument()) { uri -&gt;\nif(uri != null) {\n// textPath is an instance of okio.Path\nval textPath = uri.toOkioPath()\nLog.d(\"ModernStorage/metadata\", fileSystem.metadataOrNull(textPath).toString())\nLog.d(\"ModernStorage/content\", fileSystem.source(textPath).buffer().readUtf8())\n}\n}\n\n// Open file picker\nactionOpenTextFile.launch(arrayOf(\"text/*\"))\n</code></pre>"}]}